<?php
//require_once('../vendor/autoload.php');
//include_once '../models/conf/conf.php';


$GLOBALS['token'] = 'BQA8HIzu1HOJ9Y9SFJFykHQNMZ6wfkjMs3iXV4YxtjnNTpwDFbWjiMHqSr3wC0HdVwFhQno39PiKr5rACoh71qI_V0UEl3HLNLw1fERlcvq1G2FMxucmvVtY-8u0RIfR72Mjdce1J7foNmAcvdfP5kH3K2x2HAmOdUpROKe9UvHao4nkjL1P0NOlxrjePOFzGJBNN2ZO8O9UW-KAnCeQ91gOTrFc3Pm_jBLmqnsO8Llw2w6hXhlzrnLBVK26Q3ukqw3Qn7rop6wR23lbshFWhz6L_CxMEA';

function makeYoutubePlaylist()
{
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://www.googleapis.com/youtube/v3/playlists?part=snippet%2Cstatus&key=[YOUR_API_KEY]');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"snippet\":{\"title\":\"Sample playlist created via API\",\"description\":\"This is a sample playlist description.\",\"tags\":[\"sample playlist\",\"API call\"],\"defaultLanguage\":\"en\"},\"status\":{\"privacyStatus\":\"private\"}}");
    curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

    $headers = array();
    $headers[] = 'Authorization: Bearer [YOUR_ACCESS_TOKEN]';
    $headers[] = 'Accept: application/json';
    $headers[] = 'Content-Type: application/json';
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);

}


function getAlbumArt($album)
{
    $apikey = 'e4a73d4b8778799519e84ff54d541c9b';
    $json = @file_get_contents("http://ws.audioscrobbler.com/2.0/?method=album.search&album=" . $album . "&api_key=" . $apikey . "&format=json");
    if ($json === FALSE) {
        echo '';
    } else {
        $decoded = json_decode($json, true);
        $art = array();
        if (array_key_exists(0, $decoded['results']['albummatches']['album'])) {

            $count = count($decoded['results']['albummatches']['album'][0]['image']) - 1;

            for ($i = 0; $i <= $count; $i++) {
                if (array_key_exists('image', $decoded['results']['albummatches']['album'][0])) {
                    array_push($art, $decoded['results']['albummatches']['album'][0]['image'][$i]['#text']);
                }
            }

            return $art;
        } else {
            echo '';
        }
    }
}

//$art = getAlbumArt('exodus');
//var_dump($art);


function getAlbumInfo($artist, $album)
{
    $apikey = 'e4a73d4b8778799519e84ff54d541c9b';
    $json = file_get_contents("http://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=" . $apikey . "&artist=" . $artist . "&album=" . $album . "&format=json");
    $decoded = json_decode($json, true);

    //return $info
    return $decoded;

//$info = getAlbumInfo('nirvana', 'nevermind');
//var_dump($info['summary']);

}

function getArtistInfo($artist)
{
    $apikey = 'e4a73d4b8778799519e84ff54d541c9b';
    $json = file_get_contents("https://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=" . $artist . "&api_key=" . $apikey . "&format=json");
    $decoded = json_decode($json, true);

    return $decoded;
}

function getYoutubePlaylistItems($playlistId)
{
    $apiKey = 'AIzaSyDDZ0qDH57y64Fg1dzYm-njzfE-1T9h2eU';
    $token = 'wwFYlWXg_uutD8t_XljXoU3oSeZwda4XMfPcxt9dzhaumq297qYXgso3euxmLwVjAaXIfQTZCW92h6-RI5EodiU';

    $maxResults = 50;

    $string = json_decode(file_get_contents('https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId=' . $playlistId . '&maxResults=' . $maxResults . '&key=' . $apiKey . ''));

    return $string;
}

function getSpotifySongs($id)
{
    $token = 'BQBQtb5OGqrWD7W-m_XHmq1SqRPdfb6gWxbyRqMLOV9X1FioVH04hrpdBfiuLVeCM-LkNl0uy5BDWBiN8zNBUq3krDUXz0Ox0-Ti4RngKM8OKWotJp7emJ4VFdWC1hhfNvXZzGSeV0-Hjl81bYhAjokJeIJ1nkb5Vhy8TpDp3fkCMAe85ny5zGfd1ESWRde8g36zwcPs-c6q6zBPb68nDdWvoOGLh7MbpU6PiB8KAhwI41hqpF6KWNvJFK_dKjKgOXvHGkujXBsNu6zF-l1M5Etp-XFgww';
    $url = 'https://api.spotify.com/v1/playlists/' . $id . '/tracks';
    $ch = curl_init($url);
    $customHeaders = array(
        'Accept: application/json',
        'Content-Type: application/json',
        'Authorization: Bearer ' . $GLOBALS['token']
    );
    curl_setopt($ch, CURLOPT_HTTPHEADER, $customHeaders);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $result = json_decode(curl_exec($ch), true);

    return $result;
}


function getPlaylistInfo($playlistId)
{
    $youtube = new Madcoda\Youtube(array('key' => 'AIzaSyDDZ0qDH57y64Fg1dzYm-njzfE-1T9h2eU'));
    $playlistItems = $youtube->getPlaylistItemsByPlaylistId($playlistId);

    $decoded = json_decode(json_encode($playlistItems), true);
    $titles = array();
    foreach ($decoded as $songName) {
        $titles[] = $songName['snippet']['title'];
    }
    return $titles;
}

function getYoutubePlaylistInfo($playlist_id)
{


//Playlist: PLAD954BCB770DB285, remove PL from name
    $playlist_id = "AD954BCB770DB285";
    $url = "https://gdata.youtube.com/feeds/api/playlists/" . $playlist_id . "?v=2&alt=json";
    $data = json_decode(file_get_contents($url), true);


    return $data;

}

//$playlistId = 'PLzVlnTZP79inLqTXa-WSZ6uZjrr5hdv1P';
//$playlistSongs = getPlaylistInfo($playlistId);//gets song names form yt
//var_dump($playlistSongs);

function getTwichStreamViewerCount($username)
{
    include_once 'conf/conf.php';
    /* Database credentials. Assuming you are running MySQL
server with default setting (user 'root' with no password) */
    /* Attempt to connect to MySQL database */
    $data = getTwichUserInfo($username);
    $userId = $data->data[0]->id;

// Get cURL resource
    $url = 'https://api.twitch.tv/helix/streams?user_id=' . $userId;
    //$streamId='eighthradio';
    $ch = curl_init();
    $headers = array(
        'Accept: application/vnd.twitchtv.v5+json',
        'Client-ID: lze3t1okyae8txn8hys3utpit8osw4'
    );
    $body = '{}';
    $options = array(CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_HEADER => 0,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_TIMEOUT => 30,
        CURLOPT_POSTFIELDS => $body,
        CURLOPT_RETURNTRANSFER => true
    );

// Send the request & save response to $resp
    curl_setopt_array($ch, $options);
    $resp = json_decode(curl_exec($ch), false);
    if ($resp->data[0]->type == 'live') {
        $viewer_count = $resp->data[0]->viewer_count;
    } else {
        $viewer_count = 0;
    }

    try{
        $pdo = new PDO("mysql:host=" . DB_SERVER . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
        // Set the PDO error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch(PDOException $e){
        die("ERROR: Could not connect. " . $e->getMessage());
    }
    try {
        // Create prepared statement
        $sql = "INSERT INTO liveViews (count) VALUES (:count)";
        $stmt = $pdo->prepare($sql);

        // Bind parameters to statement
        $stmt->bindParam(':count', $viewer_count);
        // Execute the prepared statement
        $stmt->execute();

    } catch (PDOException $e) {
        die("ERROR: Could not able to execute $sql. " . $e->getMessage());
    }

// Close request to clear up some resources
    curl_close($ch);
}


function getTwichUserInfo($username)
{

// Get cURL resource
    $url = 'https://api.twitch.tv/helix/users?login=' . $username;
    //$streamId='eighthradio';
    $ch = curl_init();
    $headers = array(
        'Accept: application/vnd.twitchtv.v5+json',
        'Client-ID: lze3t1okyae8txn8hys3utpit8osw4'
    );
    $body = '{}';
    $options = array(CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_HEADER => 0,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_TIMEOUT => 30,
        CURLOPT_POSTFIELDS => $body,
        CURLOPT_RETURNTRANSFER => true
    );

// Send the request & save response to $resp
    curl_setopt_array($ch, $options);
    $resp = json_decode(curl_exec($ch));
    return $resp;
// Close request to clear up some resources
    curl_close($ch);
}

function getDonatelyInfo($accId)
{

// Get cURL resource
    $url = 'https://api.donately.com/v2/donations?account_id=' . $accId . '&limit=2';
    //$streamId='eighthradio';
    $ch = curl_init();
    $headers = array();
    $body = '{}';
    $options = array(CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_HEADER => 0,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_TIMEOUT => 30,
        CURLOPT_POSTFIELDS => $body,
        CURLOPT_RETURNTRANSFER => true
    );

// Send the request & save response to $resp
    curl_setopt_array($ch, $options);
    $resp = json_decode(curl_exec($ch));

    $money_count = $resp->summary->total_count;


    /*
    try{
        $pdo = new PDO("mysql:host=" . DB_SERVER . ";dbname=" . DB_NAME, DB_USERNAME, DB_PASSWORD);
        // Set the PDO error mode to exception
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch(PDOException $e){
        die("ERROR: Could not connect. " . $e->getMessage());
    }
    try {
        // Create prepared statement
        $sql = "INSERT INTO liveDonation (donationSum) VALUES (:donationSum)";
        $stmt = $pdo->prepare($sql);

        // Bind parameters to statement
        $stmt->bindParam(':donationSum', $money_count);
        // Execute the prepared statement
        $stmt->execute();

    } catch (PDOException $e) {
        die("ERROR: Could not able to execute $sql. " . $e->getMessage());
    }
    */



    return $money_count;
// Close request to clear up some resources
    curl_close($ch);
}

function getTwichArcivedStreams($username)
{
    $data = getTwichUserInfo($username);
    $userId = $data->data[0]->id;

// Get cURL resource
    https://api.twitch.tv/helix/streams?first=20
    $url = 'https://api.twitch.tv/helix/videos?user_id=' . $userId;
    //$streamId='eighthradio';
    $ch = curl_init();
    $headers = array(
        'Accept: application/vnd.twitchtv.v5+json',
        'Client-ID: lze3t1okyae8txn8hys3utpit8osw4'
    );
    $body = '{}';
    $options = array(CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_HEADER => 0,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_TIMEOUT => 30,
        CURLOPT_POSTFIELDS => $body,
        CURLOPT_RETURNTRANSFER => true
    );

// Send the request & save response to $resp
    curl_setopt_array($ch, $options);
    $resp = json_decode(curl_exec($ch));
    return $resp;
// Close request to clear up some resources
    curl_close($ch);
}


?>

